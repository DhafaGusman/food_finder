/* script.js */

document.addEventListener("DOMContentLoaded", function() {
  feather.replace();
});

// Untuk update placeholder
function updatePlaceholder() {
  const input = document.getElementById("formSearch");
  const currentHour = new Date().getHours();

  if (currentHour < 12) {
    input.placeholder = "What's your breakfast choice today?";
  } else if (currentHour < 17) {
    input.placeholder = "What's your lunch choice today?";
  } else {
    input.placeholder = "What's your dinner choice today?";
  }   
}
window.onload = updatePlaceholder;

// Fungsi untuk set lokasi dan ambil data restoran dari json
$(document).ready(function () {
  let currentCity = "Jakarta"; // Data secara default

  // Fungsi untuk mengambil dan menampilkan data dari JSON
  function loadRestaurants(city) {
    $.ajax({
      url: "node_modules/json/restaurant_list.json",
      method: "GET",
      dataType: "json",
      success: function (data) {
        displayRestaurants(data.restaurants, city);
      },
      error: function () {
        console.log("Error: Tidak bisa memuat data restoran.");
      }
    });
  }

  // Fungsi untuk menampilkan data restoran berdasarkan kota
  function displayRestaurants(restaurants, city) {
    const filteredRestaurants = restaurants.filter(
      (restaurant) => restaurant.city === city
    );
    const maxDisplay = 8;
    const restaurantList = $("#restaurantList");
    restaurantList.empty();

    filteredRestaurants.slice(0, maxDisplay).forEach(function (restaurant) {
      // Membuat card untuk setiap restoran
      const card = `
        <a href="${restaurant.link}" class="card-restaurant-link">
          <div class="card-restaurant">
            <div class="badge-promo">Promo</div>
            <img src="${restaurant.image}" alt="${restaurant.alt}" class="card-img-restaurant" />
            <div class="card-body-restaurant">
              <h3 class="card-title-restaurant">${restaurant.name}</h3>
              <p class="card-text-category">${restaurant.category}</p>
              <div class="card-text-description">
                <i data-feather="map-pin" class="card-icon"></i>
                <span class="card-text-description-span">${restaurant.distance}</span>
                <i data-feather="clock" class="card-icon"></i>
                <span class="card-text-description-span">${restaurant.time}</span>
                <img src="assets/img/icon/star_24dp_FFD27D.svg" alt="" class="card-icon" />
                ${restaurant.rating}
              </div>
            </div>
          </div>
        </a>`;
      restaurantList.append(card);
    });

    // Refresh Feather Icons (jika menggunakan feather icons)
    feather.replace();
  }

  // Load data restoran saat dokumen siap
  loadRestaurants(currentCity);

  // Fungsi untuk reverse geocode dan update city
  function reverseGeocode(latitude, longitude) {
    const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=12&addressdetails=1`;

    fetch(url)
      .then((response) => response.json())
      .then((data) => {
        const address = data.address;
        let locationName = '';

        if (address.suburb) {
          locationName = address.suburb;
        } else if (address.village) {
          locationName = address.village;
        } else if (address.county) {
          locationName = address.county;
        }

        if (locationName) {
          currentCity = locationName; // Update city
          document.getElementById("dropdownLocation").innerHTML =
            locationName + '<i data-feather="chevron-down" class="icon-dropdown">';
          feather.replace();

          // Load data restoran berdasarkan kota yang baru
          loadRestaurants(currentCity);
        } else {
          alert("Unable to find a detailed location for your area.");
        }
      })
      .catch((error) => console.log(error));
  }

  // Fungsi untuk mengambil lokasi pengguna
  document.getElementById("useCurrentLocation").addEventListener("click", function (e) {
    e.preventDefault();
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function (position) {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        // Panggil fungsi reverse geocoding untuk mendapatkan nama kota
        reverseGeocode(latitude, longitude);
      });
    } else {
      alert("Geolocation is not supported by this browser.");
    }
  });

  // Untuk memasukkan lokasi manual
  document.getElementById("insertLocation").addEventListener("click", function (e) {
    e.preventDefault();
    const manualLocation = prompt("Please enter your location:");

    if (manualLocation) {
      currentCity = manualLocation; // Update city secara manual
      document.getElementById("dropdownLocation").innerHTML =
        manualLocation + '<i data-feather="chevron-down" class="icon-dropdown">';
      feather.replace();

      // Load data restoran berdasarkan kota yang baru
      loadRestaurants(currentCity);
    } else {
      alert("No location entered.");
    }
  });
});

// Untuk scroll down button
document.getElementById("scrollDownButton").addEventListener("click", function () {
    const aboutUsSection = document.getElementById("categoriesSection");
    const targetPosition = aboutUsSection.getBoundingClientRect().top + window.pageYOffset;
  
    window.scrollTo({
      top: targetPosition,
      behavior: "smooth"
    });
});

// Fungsi untuk ubah title agar bervariasi
$(document).ready(function() {
  // Daftar kalimat yang akan ditampilkan
  var sentences = [
    "Find your food at",
    "Discover delights at",
    "Experience great food at",
    "Uncover local bites at"
  ];

  var index = 0;
  var charIndex = 0;
  var currentSentence = "";
  var typingSpeed = 50;

  // Fungsi mengetik karakter demi karakter
  function typeSentence() {
    if (charIndex < currentSentence.length) {
      // Tambahkan satu karakter ke teks
      $("#titleHeader1").text($("#titleHeader1").text() + currentSentence[charIndex]);
      charIndex++;
      setTimeout(typeSentence, typingSpeed);
    } else {
      // Setelah selesai mengetik, tunggu sebelum mengganti teks
      setTimeout(deleteSentence, 3000); 
    }
  }

  // Fungsi untuk menghapus teks karakter demi karakter
  function deleteSentence() {
    if (charIndex > 0) {
      // Hapus satu karakter dari teks
      $("#titleHeader1").text(currentSentence.substring(0, charIndex - 1));
      charIndex--;
      setTimeout(deleteSentence, typingSpeed);
    } else {
      // Setelah selesai menghapus, ganti ke kalimat berikutnya
      index = (index + 1) % sentences.length;
      currentSentence = sentences[index];
      setTimeout(typeSentence, typingSpeed);
    }
  }

  // Mulai efek mengetik dengan kalimat pertama
  currentSentence = sentences[index];
  setTimeout(typeSentence, typingSpeed);
});

// Fungsi untuk swiperjs (slider/carousel)
const sliderHome = new Swiper('.slider-container', {
  slidesPerView: 1,
  loop: true,
  effect: "fade",
  autoplay: {
    delay: 10000,
  },
  navigation: {
    nextEl: '.slider-btn-next',
    prevEl: '.slider-btn-prev',
  },
});
