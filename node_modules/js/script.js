/* script.js */

feather.replace();

// Untuk update placeholder
function updatePlaceholder() {
  const input = document.getElementById("formSearch");
  const currentHour = new Date().getHours();

  if (currentHour < 12) {
    input.placeholder = "What's your breakfast choice today?";
  } else if (currentHour < 17) {
    input.placeholder = "What's your lunch choice today?";
  } else {
    input.placeholder = "What's your dinner choice today?";
  }   
}
window.onload = updatePlaceholder;

// Fungsi untuk melakukan reverse geocoding dengan Nominatim
function reverseGeocode(latitude, longitude) {
  const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=12&addressdetails=1`;
  
  fetch(url)
    .then(response => response.json())
    .then(data => {
      const address = data.address;
      let locationName = '';

      // Prioritaskan kecamatan (suburb)
      if (address.suburb) {
        locationName = address.suburb; // Kecamatan atau daerah perkotaan
      } else if (address.village) {
        locationName = address.village; // Desa atau area rural
      } else if (address.county) {
        locationName = address.county; // Kabupaten
      }

      // Tampilkan nama lokasi di dropdown
      if (locationName) {
        document.getElementById("dropdownLocation").innerHTML = locationName + '<i data-feather="chevron-down" class="icon-dropdown">';
        feather.replace();
      } else {
        alert("Unable to find a detailed location for your area.");
      }
    })
    .catch(error => console.log(error));
}


// Fungsi untuk mengambil lokasi pengguna
document.getElementById("useCurrentLocation").addEventListener("click", function (e) {
  e.preventDefault();
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function (position) {
      const latitude = position.coords.latitude;
      const longitude = position.coords.longitude;

      // Panggil fungsi reverse geocoding untuk mendapatkan nama kota
      reverseGeocode(latitude, longitude);
    });
  } else {
    alert("Geolocation is not supported by this browser.");
  }
});

// Untuk masukkan lokasi manual
document.getElementById("insertLocation").addEventListener("click", function (e) {
  e.preventDefault();
  const manualLocation = prompt("Please enter your location:");
  
  // Jika pengguna memasukkan lokasi, ubah label dropdown
  if (manualLocation) {
    document.getElementById("dropdownLocation").innerHTML = manualLocation + '<i data-feather="chevron-down" class="icon-dropdown">';
    feather.replace();
  } else {
    alert("No location entered.");
  }
});

// Untuk scroll down button
document.getElementById("scrollDownButton").addEventListener("click", function () {
    const aboutUsSection = document.getElementById("categoriesSection");
    const targetPosition = aboutUsSection.getBoundingClientRect().top + window.pageYOffset;
  
    window.scrollTo({
      top: targetPosition,
      behavior: "smooth" // Menambahkan efek smooth scroll
    });
});

// Ubah title agar bervariasi
$(document).ready(function() {
  // Daftar kalimat yang akan ditampilkan
  var sentences = [
    "Find your food at",
    "Discover delights at",
    "Experience great food at",
    "Uncover local bites at"
  ];

  var index = 0;
  var charIndex = 0;
  var currentSentence = "";
  var typingSpeed = 50; // Kecepatan mengetik (ms)

  // Fungsi mengetik karakter demi karakter
  function typeSentence() {
    if (charIndex < currentSentence.length) {
      // Tambahkan satu karakter ke teks
      $("#titleHeader1").text($("#titleHeader1").text() + currentSentence[charIndex]);
      charIndex++;
      setTimeout(typeSentence, typingSpeed); // Lanjutkan mengetik
    } else {
      // Setelah selesai mengetik, tunggu sebelum mengganti teks
      setTimeout(deleteSentence, 3000); // 2 detik jeda sebelum menghapus teks
    }
  }

  // Fungsi untuk menghapus teks karakter demi karakter
  function deleteSentence() {
    if (charIndex > 0) {
      // Hapus satu karakter dari teks
      $("#titleHeader1").text(currentSentence.substring(0, charIndex - 1));
      charIndex--;
      setTimeout(deleteSentence, typingSpeed); // Lanjutkan menghapus
    } else {
      // Setelah selesai menghapus, ganti ke kalimat berikutnya
      index = (index + 1) % sentences.length;
      currentSentence = sentences[index];
      setTimeout(typeSentence, typingSpeed); // Mulai mengetik kalimat baru
    }
  }

  // Mulai efek mengetik dengan kalimat pertama
  currentSentence = sentences[index];
  setTimeout(typeSentence, typingSpeed);
});
